Index: MLB/mlb_ML.py
===================================================================
diff --git a/MLB/mlb_ML.py b/MLB/mlb_ML.py
deleted file mode 100644
--- a/MLB/mlb_ML.py	(revision 01a9a46a116bf34bcc3d117579990e11ae636582)
+++ /dev/null	(revision 01a9a46a116bf34bcc3d117579990e11ae636582)
@@ -1,56 +0,0 @@
-from keras.src.optimizers import SGD
-import mlb_database
-import pandas as pd
-import mlb_pred_v2
-import numpy as np
-from sklearn.model_selection import train_test_split
-from keras import Sequential, layers, models
-# pip install tensorflow
-MLB_MODEL = r'C:\Users\jamel\PycharmProjects\JamelScripts\MLB\mlb_predictor.keras'
-
-
-def mlb_database_to_matrix(table):
-    query = f'SELECT * FROM {table}'
-    connection = mlb_database.create_db_connection(*mlb_database.logon_dict.values(), 'mlb')
-    mlb_data = pd.read_sql(query, connection)
-    return mlb_data
-
-
-def load_mlb_model():
-    model: Sequential = models.load_model(MLB_MODEL)
-    return model
-
-
-def get_mlb_prediction(game_id, model):
-    try:
-        _, away_team, home_team, away_ops, home_ops, away_fp, home_fp, away_era, home_era, _ = mlb_pred_v2.get_lineup_data(
-            game_id)
-        game_info = np.array((away_ops, home_ops, away_fp, home_fp, away_era, home_era), dtype=float).reshape(1, -1)
-        prediction = model.predict([game_info])[0][0]
-        # print(f'{away_team}:{1-prediction}  {home_team}:{prediction}')
-        return away_team, home_team, (1 - prediction, prediction)
-    except Exception as e:
-        print(e)
-
-
-if __name__ == '__main__':
-    mlb_data = mlb_database_to_matrix('games')
-    mlb_data = mlb_data[mlb_data['homeoraway'] != 2]
-    X = mlb_data[['away_ops', 'home_ops', 'away_fp', 'home_fp', 'away_era', 'home_era']]
-    y = mlb_data['homeoraway']
-
-    # Split the data into training and testing sets
-    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
-
-    model = Sequential()
-    model.add(layers.Dense(12, activation='relu', input_shape=(6,), kernel_initializer='he_uniform'))
-    # model.add(layers.Dense(18, activation='relu'))
-    model.add(layers.Dense(1, activation='sigmoid'))
-    opt = SGD(learning_rate=0.001, momentum=0.9)
-    model.compile(loss='binary_crossentropy', optimizer=opt, metrics=['accuracy'])
-
-    model.fit(X_train, y_train, epochs=50, batch_size=10, validation_data=(X_test, y_test))
-    _, accuracy = model.evaluate(X_test, y_test)
-    print('Accuracy: %.2f' % (accuracy * 100))
-    model.save(MLB_MODEL)
-    model = models.load_model(MLB_MODEL)
Index: MLB/scratch.py
===================================================================
diff --git a/MLB/scratch.py b/MLB/scratch.py
deleted file mode 100644
--- a/MLB/scratch.py	(revision 01a9a46a116bf34bcc3d117579990e11ae636582)
+++ /dev/null	(revision 01a9a46a116bf34bcc3d117579990e11ae636582)
@@ -1,23 +0,0 @@
-# import mlb_ML
-# import mlb_LR
-# from datetime import datetime,timedelta
-# import mlb_pred_v2
-# date=datetime.now().strftime("%Y-%m-%d")
-# yesterday=(datetime.now()-timedelta(days=1)).strftime("%Y-%m-%d")
-# # add average rnus to data
-#
-# # bet on total runs instead of wins for some
-# # mlb_ML.get_mlb_prediction('2024-7-4')
-#
-# if __name__=='__main__':
-#     for id in mlb_pred_v2.get_game_ids(date):
-#         print(mlb_pred_v2.get_top_three_batters_ops(id))
-#     game_ids=[game_id for game_id in mlb_pred_v2.get_game_ids(date)]
-#     ml_model=[mlb_ML.load_mlb_model() for id in game_ids]
-#     ml_results=[result for result in mlb_pred_v2.use_process_pool(mlb_ML.get_mlb_prediction,[game_ids,ml_model],6) if result]
-#     lr_model=[mlb_LR.load_mlb_model() for id in game_ids]
-#     lr_results=[result for result in mlb_pred_v2.use_process_pool(mlb_LR.get_mlb_prediction,[game_ids,lr_model],6) if result]
-#     for (away,home,(a_pred,h_pred)),(away1,_,(a_pred1,h_pred1)) in zip(ml_results,lr_results):
-#         if away1==away:
-#             print(f'{away}:{a_pred+a_pred1}  {home}:{h_pred+h_pred1}')
-
Index: MLB/mlb_pred_v2.py
===================================================================
diff --git a/MLB/mlb_pred_v2.py b/MLB/mlb_pred_v2.py
deleted file mode 100644
--- a/MLB/mlb_pred_v2.py	(revision 01a9a46a116bf34bcc3d117579990e11ae636582)
+++ /dev/null	(revision 01a9a46a116bf34bcc3d117579990e11ae636582)
@@ -1,146 +0,0 @@
-from concurrent.futures import ThreadPoolExecutor,ProcessPoolExecutor
-
-import statsapi
-from datetime import datetime, timedelta
-from numpy import mean
-
-from MLB.mlb_database import insert_game, create_db_connection, logon_dict, get_table_column
-
-
-
-def get_game_ids(date:str=datetime.now().strftime("%Y-%m-%d")):
-    schedule = statsapi.schedule(start_date=date, end_date=date)
-    game_ids = [game['game_id'] for game in schedule]
-    return game_ids
-
-
-def get_fielding_stats(player_id, season='2024'):
-    stats = statsapi.get('person',
-                         {'personId': player_id, 'hydrate': f'stats(group=[fielding],type=[season],season={season})'})
-    try:
-        fp = float(stats.get('people')[0].get('stats')[0].get('splits')[0].get('stat').get('fielding'))
-    except TypeError as e:
-        print('no stats')
-        return None
-    if fp <= 0:
-        return None
-    return fp
-
-
-def get_top_three_batters_ops(game_id):
-    game_data = statsapi.boxscore_data(game_id)
-
-    home_team = game_data['home']
-    away_team = game_data['away']
-
-    home_name = game_data['teamInfo']['home']['teamName']
-    away_name = game_data['teamInfo']['away']['teamName']
-
-    home_players = home_team['players']
-    away_players = away_team['players']
-    home_ops = {player['person']['fullName']:float(player['seasonStats']['batting']['avg'])*player['seasonStats']['batting']['atBats'] for player in home_players.values() if
-                'battingOrder' in player.keys()}
-    home_ops = sorted(home_ops.items(),key=lambda item:item[1],reverse=True)
-    away_ops = {player['person']['fullName']:float(player['seasonStats']['batting']['avg'])*player['seasonStats']['batting']['atBats'] for player in away_players.values() if
-                'battingOrder' in player.keys()}
-    away_ops = sorted(away_ops.items(), key=lambda item: item[1],reverse=True)
-    if away_ops and home_ops:
-        return away_name,home_name, away_ops[0:2],home_ops[0:2],away_ops[-1],home_ops[-1]
-    else:
-        return
-
-
-def get_winning_team(game_id):
-    # Retrieve game schedule information
-    schedule_info = statsapi.schedule(game_id=game_id)
-
-    if not schedule_info:
-        return "Game not found"
-
-    game = schedule_info[0]
-    home_team, away_team = game['home_name'], game['away_name']
-    home_score, away_score = game['home_score'], game['away_score']
-    game_status = game['status']
-
-    # Determine the winner
-    if game_status == 'Final':
-        return int(home_score > away_score)
-    else:
-        return 2
-def use_thread_pool(function,iterable_of_iterables):
-    with ThreadPoolExecutor(max_workers=len(iterable_of_iterables[0])) as executor:
-        executor.map(function, *iterable_of_iterables)
-
-def use_process_pool(function,iterable_of_iterables,num_workers):
-    with ProcessPoolExecutor(max_workers=num_workers) as executor:
-        results=list(executor.map(function, *iterable_of_iterables))
-    if results:
-        return results
-def get_lineup_data(game_id):
-    game_data = statsapi.boxscore_data(game_id)
-    season = game_data['gameId'][0:4]
-
-    home_team = game_data['home']
-    away_team = game_data['away']
-    home_name=game_data['teamInfo']['home']['teamName']
-    away_name = game_data['teamInfo']['away']['teamName']
-
-    home_players = home_team['players']
-    away_players = away_team['players']
-
-    home_ops = [float(player['seasonStats']['batting']['ops']) for player in home_players.values() if
-                'battingOrder' in player.keys()]
-
-    away_ops = [float(player['seasonStats']['batting']['ops']) for player in away_players.values() if
-                'battingOrder' in player.keys()]
-    home_fp = [get_fielding_stats(player['person']['id'], season) for player in home_players.values() if
-               'battingOrder' in player.keys()]
-    away_fp = [get_fielding_stats(player['person']['id'], season) for player in away_players.values() if
-               'battingOrder' in player.keys()]
-
-    home_fp = [fp for fp in home_fp if isinstance(fp, float)]
-    away_fp = [fp for fp in away_fp if isinstance(fp, float)]
-
-    away_starting_pitcher=game_data.get('awayPitchers')[1].get('personId')
-    away_era=game_data['away']['players'][f'ID{away_starting_pitcher}']['seasonStats']['pitching']['era']
-    if not away_era[0].isalnum():
-        away_era=3.0
-    home_starting_pitcher = game_data.get('homePitchers')[1].get('personId')
-    home_era = game_data['home']['players'][f'ID{home_starting_pitcher}']['seasonStats']['pitching']['era']
-    if not home_era[0].isalnum():
-        home_era=3.0
-    winner=get_winning_team(game_id)
-    return game_id,away_name, home_name, mean(away_ops), mean(home_ops), mean(away_fp), mean(
-        home_fp), float(away_era), float(home_era), winner
-
-def get_baseball_season_dates(year: int):
-    delta = timedelta(days=1)
-
-    start = datetime(year, 3, 28)
-    end = datetime(year, 9, 28)
-    dates = set()
-    while start <= end:
-        # add current date to list by converting  it to iso format
-        dates.add(start.strftime("%Y-%m-%d"))
-        # increment start date by timedelta
-        start += delta
-    sql_connect = create_db_connection(*logon_dict.values(), 'mlb')
-    table_dates = set(
-        date[0].strftime("%Y-%m-%d") for date in get_table_column(sql_connect, 'games', 'date'))
-    dates = dates.difference(table_dates)
-    return dates
-
-if __name__ == '__main__':
-    for date in get_baseball_season_dates(2023):
-        try:
-            print(date)
-            game_ids=get_game_ids(date)
-            with ThreadPoolExecutor(max_workers=len(game_ids)) as executor:
-                game_info=list(executor.map(get_lineup_data,  game_ids))
-            sql_connects = tuple(
-                create_db_connection(*logon_dict.values(), 'mlb') for _ in range(len(game_info)))
-            insert_function = lambda connection, game: insert_game('games', connection, *game, date)
-            with ThreadPoolExecutor(max_workers=len(game_info)) as executor:
-                executor.map(insert_function, sql_connects, game_info)
-        except Exception as e:
-            print(e)
Index: MLB/mlb_database.py
===================================================================
diff --git a/MLB/mlb_database.py b/MLB/mlb_database.py
deleted file mode 100644
--- a/MLB/mlb_database.py	(revision 01a9a46a116bf34bcc3d117579990e11ae636582)
+++ /dev/null	(revision 01a9a46a116bf34bcc3d117579990e11ae636582)
@@ -1,92 +0,0 @@
-import mysql.connector
-from mysql.connector import Error
-import pandas as pd
-from json import load
-# pip install mysql-connector-python
-
-def create_server_connection(host_name, user_name, user_password):
-    connection = None
-    try:
-        connection = mysql.connector.connect(
-            host=host_name,
-            user=user_name,
-            passwd=user_password
-        )
-        print("MySQL Database connection successful")
-    except Error as err:
-        print(f"Error: '{err}'")
-
-    return connection
-
-def create_database(connection, query):
-    cursor = connection.cursor()
-    try:
-        cursor.execute(query)
-        print("Database created successfully")
-    except Error as err:
-        print(f"Error: '{err}'")
-
-def create_db_connection(host_name, user_name, user_password, db_name):
-    connection = None
-    try:
-        connection = mysql.connector.connect(
-            host=host_name,
-            user=user_name,
-            passwd=user_password,
-            database=db_name
-        )
-        print("MySQL Database connection successful")
-    except Error as err:
-        print(f"Error: '{err}'")
-
-    return connection
-
-def execute_query(connection, query):
-    cursor = connection.cursor()
-    try:
-        cursor.execute(query)
-        connection.commit()
-        print("Query successful")
-    except Error as err:
-        print(f"Error: '{err}'")
-
-def get_table_column(connection,table,column):
-     cursor = connection.cursor()
-     try:
-         cursor.execute(f"SELECT {column} FROM {table}")
-         results=cursor.fetchall()
-         cursor.close()
-         return results
-     except Error as err:
-         print(f"Error: '{err}'")
-
-
-create_games_table = """
-CREATE TABLE games (
-  game_id INT PRIMARY KEY,
-  away_team VARCHAR(40) NOT NULL,
-  home_team VARCHAR(40) NOT NULL,
-  away_ops FLOAT NOT NULL,
-  home_ops FLOAT NOT NULL,
-  away_fp FLOAT NOT NULL,
-  home_fp FLOAT NOT NULL,
-  away_era FLOAT NOT NULL,
-  home_era FLOAT NOT NULL,
-  homeoraway int NOT NULL,
-  date DATE NOT NULL
-);
- """
-def insert_game(table,connection,*args):
-    entries=','.join(f"'{arg}'" if isinstance(arg,str) else str(arg) for arg in args)
-    query=f"""INSERT
-    INTO
-    {table}
-    VALUES ({entries});"""
-    execute_query(connection,query)
-
-if __name__=='__main__':
-    CREDENTIALS_JSON = r'sql.json'
-    with open(CREDENTIALS_JSON, 'rb') as jfile:
-        logon_dict: dict = load(jfile)
-    sql_connect=create_db_connection(*logon_dict.values(),'mlb')
-    create_database(sql_connect,create_games_table)
Index: MLB/mlb_LR.py
===================================================================
diff --git a/MLB/mlb_LR.py b/MLB/mlb_LR.py
deleted file mode 100644
--- a/MLB/mlb_LR.py	(revision 01a9a46a116bf34bcc3d117579990e11ae636582)
+++ /dev/null	(revision 01a9a46a116bf34bcc3d117579990e11ae636582)
@@ -1,43 +0,0 @@
-import joblib
-import mlb_database
-import pandas as pd
-import mlb_pred_v2
-import numpy as np
-from sklearn.model_selection import train_test_split
-from sklearn.linear_model import LogisticRegression
-
-#i can combine regression and NN
-MLB_MODEL=r'C:\Users\jamel\PycharmProjects\JamelScripts\MLB\mlb_predictor.pkl'
-def mlb_database_to_matrix(table):
-    query = f'SELECT * FROM {table}'
-    connection=mlb_database.create_db_connection(*mlb_database.logon_dict.values(), 'mlb')
-    mlb_data=pd.read_sql(query,connection)
-    return mlb_data
-def load_mlb_model():
-    return joblib.load(MLB_MODEL)
-def get_mlb_prediction(game_id,model):
-    try:
-        _,away_team,home_team,away_ops,home_ops,away_fp,home_fp,away_era,home_era,_=mlb_pred_v2.get_lineup_data(game_id)
-        game_info=np.array((away_ops,home_ops,away_fp,home_fp,away_era,home_era),dtype=float).reshape(1,-1)
-        prediction=model.predict_proba(game_info)[0]
-        # print(f'{away_team}:{prediction[0]}  {home_team}:{prediction[1]}')
-        return away_team, home_team,prediction
-    except Exception as e:
-        print(e)
-
-if __name__=='__main__':
-    mlb_data=mlb_database_to_matrix('games')
-    mlb_data=mlb_data[mlb_data['homeoraway']!=2]
-    X = mlb_data[['away_ops', 'home_ops', 'away_fp', 'home_fp', 'away_era', 'home_era']]
-    y = mlb_data['homeoraway']
-
-    # Split the data into training and testing sets
-    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
-    logreg = LogisticRegression(random_state=16)
-
-    # fit the model with data
-    logreg.fit(X, y)
-
-    joblib.dump(logreg, MLB_MODEL)
-
-
Index: MLB/ml_pred_v3.py
===================================================================
diff --git a/MLB/ml_pred_v3.py b/MLB/ml_pred_v3.py
deleted file mode 100644
--- a/MLB/ml_pred_v3.py	(revision 01a9a46a116bf34bcc3d117579990e11ae636582)
+++ /dev/null	(revision 01a9a46a116bf34bcc3d117579990e11ae636582)
@@ -1,170 +0,0 @@
-import re
-import statsapi
-import mlbstatsapi
-import pandas as pd
-
-from datetime import datetime, timedelta
-from numpy import mean, median
-
-
-
-def team_stats(game_id):
-    game_data = statsapi.boxscore_data(game_id)
-    home_dict={'name':game_data['teamInfo']['home']['teamName']}
-    away_dict={'name':game_data['teamInfo']['away']['teamName']}
-
-    home_id = game_data['teamInfo']['home']['id']
-    away_id = game_data['teamInfo']['away']['id']
-    home_stats=mlb.get_team_stats(home_id, ['season', 'seasonAdvanced'], ['hitting','pitching'],**{'season': 2024})
-    away_stats=mlb.get_team_stats(away_id, ['season', 'seasonAdvanced'], ['hitting','pitching'],**{'season': 2024})
-    home_hits=home_stats['hitting']['season']
-    away_hits= away_stats['hitting']['season']
-    home_pitch = home_stats['pitching']['season']
-    away_pitch = away_stats['pitching']['season']
-
-    home_dict['runs']=home_hits.splits[0].stat.__dict__['runs']
-    away_dict['runs'] = away_hits.splits[0].stat.__dict__['runs']
-    home_dict['SO']=home_hits.splits[0].stat.__dict__['strikeouts']
-    away_dict['SO'] = away_hits.splits[0].stat.__dict__['strikeouts']
-    home_dict['hits']=home_hits.splits[0].stat.__dict__['hits']
-    away_dict['hits'] = away_hits.splits[0].stat.__dict__['hits']
-    home_dict['BB'] = home_hits.splits[0].stat.__dict__['baseonballs']
-    away_dict['BB'] = away_hits.splits[0].stat.__dict__['baseonballs']
-    home_dict['ER'] = home_pitch.splits[0].stat.__dict__['runs']
-    away_dict['ER'] = away_pitch.splits[0].stat.__dict__['runs']
-    return home_dict,away_dict
-today=datetime.now().strftime("%Y-%m-%d")
-tomorrow=(datetime.now()+timedelta(days=1)).strftime("%Y-%m-%d")
-
-def get_pitching_lastxgames(pitcher_id,hit_rank:pd.DataFrame,num_of_games=5):
-    aggregate_stats={}
-
-    games = mlb.get_player_stats(pitcher_id, stats=['gameLog'], groups=['pitching']).get('pitching',{}).get('gamelog',mlbstatsapi.mlb_api.Stat(type='gameLog',group='pitching',totalsplits=1)).__getattribute__('splits')
-
-    if games.__len__() >= num_of_games:
-        games=games[-num_of_games:]
-        aggregate_stats['name']=games[0].player.fullname
-        aggregate_stats['team'] = games[-1].team.name
-        runs=mean(tuple(game.stat.runs for game in games))
-        SO = mean(tuple(game.stat.strikeouts for game in games))
-        hits = median(tuple(game.stat.hits for game in games))
-        IP= mean(tuple(float(game.stat.inningspitched) for game in games))
-        SO_rank=median(tuple(get_hit_rank_position(hit_rank,game.opponent['name']) for game in games))
-        run_rank=median(tuple(get_hit_rank_position(hit_rank,game.opponent['name'],'R') for game in games))
-        aggregate_stats['runs']=runs
-        aggregate_stats['R_rank'] = run_rank
-        aggregate_stats['SO'] = SO
-        aggregate_stats['SO_rank']=SO_rank
-        aggregate_stats['HIP'] = hits/IP
-        aggregate_stats['IP'] = IP
-        aggregate_stats['score']=SO+IP-(aggregate_stats['HIP']*runs)
-    else:
-        aggregate_stats['name'] = ''
-        aggregate_stats['team'] = ''
-        aggregate_stats['runs'] = 0
-        aggregate_stats['R_rank'] = 0
-        aggregate_stats['SO'] = 0
-        aggregate_stats['SO_rank']=0
-        aggregate_stats['HIP'] = 0
-        aggregate_stats['IP'] = 0
-        aggregate_stats['score'] = 0
-    return aggregate_stats
-# game.__getattribute__('ishome') game_data.gamedata.teams.away.name
-# # Loop through the games to find starting pitchers
-
-def get_hit_rank_position(hit_rank:pd.DataFrame,team:str,category='SO'):
-    hit_rank=hit_rank.sort_values(category)
-    return hit_rank.index.get_loc(team)
-
-def get_pitch_ranking():
-    stat_url='https://www.mlb.com/stats/team/pitching?timeframe=-29'
-    if (response := requests.get(stat_url)).status_code == 200:
-        soup = BeautifulSoup(response.content, 'html.parser')
-        seen_set=set()
-        columns=[]
-        for column in soup.find('thead').findAll('abbr'):
-            column = re.search(r'>(.*)<', str(column)).group(1)
-            if column not in seen_set:
-                columns.append(column)
-                seen_set.add(column)
-        data_table = pd.DataFrame(columns=columns)
-        for team in soup.find('tbody').findAll('tr'):
-            new_row=[]
-            team_name=team.find('th').find('a')['aria-label']
-            new_row.append(team_name)
-            for stat in team.findAll('td'):
-                new_row.append(stat.text)
-            data_table=data_table._append({column:value for column,value in zip(columns,new_row)}, ignore_index=True)
-        data_table = data_table.set_index('TEAM').infer_objects()
-        data_table['ER'] = data_table['ER'].astype(int) / data_table['G'].astype(int)
-        data_table.to_csv('pitch_rank.csv')
-        data_table = pd.read_csv('pitch_rank.csv', index_col='TEAM')
-        return data_table
-
-def get_hitting_ranking():
-    stat_url='https://www.mlb.com/stats/team?timeframe=-29'
-    if (response := requests.get(stat_url)).status_code == 200:
-        soup = BeautifulSoup(response.content, 'html.parser')
-        seen_set=set()
-        columns=[]
-        for column in soup.find('thead').findAll('abbr'):
-            column = re.search(r'>(.*)<', str(column)).group(1)
-            if column not in seen_set:
-                columns.append(column)
-                seen_set.add(column)
-        data_table = pd.DataFrame(columns=columns)
-        for team in soup.find('tbody').findAll('tr'):
-            new_row=[]
-            team_name=team.find('th').find('a')['aria-label']
-            new_row.append(team_name)
-            for stat in team.findAll('td'):
-                new_row.append(stat.text)
-            data_table=data_table._append({column:value for column,value in zip(columns,new_row)}, ignore_index=True)
-        data_table=data_table.set_index('TEAM')
-        data_table['R']=data_table['R'].astype(int)/data_table['G'].astype(int)
-        data_table.to_csv('hit_rank.csv')
-        data_table=pd.read_csv('hit_rank.csv',index_col='TEAM')
-        return data_table
-
-
-def pitcher_table(make_run_table=True):
-    table=pd.DataFrame()
-    run_table=pd.DataFrame(columns=['home','home_pot','away','away_pot'])
-    hit_rank = get_hitting_ranking()
-    pitch_rank = get_pitch_ranking()
-    for game in schedule:
-        run_pot={}
-        game_id = game.gamepk
-        game_data = mlb.get_game(game_id)
-        away_name=game_data.gamedata.teams.away.name
-        home_name=game_data.gamedata.teams.home.name
-        pitchers=game_data.gamedata.probablepitchers
-        if home_pitcher:=pitchers.home:
-            home_stats = get_pitching_lastxgames(home_pitcher.id,hit_rank)
-            home_stats['side'] = 'home'
-            home_stats['opp'] = away_name
-            home_stats['opp_SO(1)'] = get_hit_rank_position(hit_rank,away_name)
-            home_stats['opp_R(30)'] = get_hit_rank_position(hit_rank, away_name,'R')
-            table=pd.concat([table,pd.DataFrame(home_stats,index=[0])], ignore_index=True)
-
-        if away_pitcher:=pitchers.away:
-            away_stats=get_pitching_lastxgames(away_pitcher.id,hit_rank)
-            away_stats['side']='away'
-            away_stats['opp']=home_name
-            away_stats['opp_SO(1)'] = get_hit_rank_position(hit_rank, home_name)
-            away_stats['opp_R(30)'] = get_hit_rank_position(hit_rank, home_name,'R')
-            table=pd.concat([table,pd.DataFrame(away_stats,index=[0])], ignore_index=True)
-
-        if away_pitcher and home_pitcher:
-            run_pot['home'] = home_name
-            run_pot['home_pot'] = hit_rank.loc[home_name, 'R'] + pitch_rank.loc[away_name, 'ER'] +away_stats['runs']
-            run_pot['away'] = away_name
-            run_pot['away_pot'] = hit_rank.loc[away_name, 'R'] + pitch_rank.loc[home_name, 'ER'] + home_stats['runs']
-            run_table = pd.concat([run_table, pd.DataFrame(run_pot, index=[0])], ignore_index=True)
-    run_table.to_csv('run_pot.csv')
-    table.to_csv('todays_pitchers.csv')
-    return table
-if __name__=='_main__':
-    mlb = mlbstatsapi.Mlb()
-    schedule = mlb.get_scheduled_games_by_date(start_date=today, end_date=today)
-    pitcher_table()
Index: MLB/mlb_pred.py
===================================================================
diff --git a/MLB/mlb_pred.py b/MLB/mlb_pred.py
deleted file mode 100644
--- a/MLB/mlb_pred.py	(revision 01a9a46a116bf34bcc3d117579990e11ae636582)
+++ /dev/null	(revision 01a9a46a116bf34bcc3d117579990e11ae636582)
@@ -1,174 +0,0 @@
-import re
-from datetime import datetime, timedelta
-from types import NoneType
-import requests
-from bs4 import BeautifulSoup
-import html_to_json
-import statsapi
-from concurrent.futures import ThreadPoolExecutor
-from enum import Enum
-import MLB.mlb_database
-#pip install html-to-json
-
-class Team(Enum):
-    away = 0
-    home = 1
-
-#just gonna use statsapi, also need to get stats from the relevant year
-
-# machine learning
-# be able to look at latest date and contineu on
-# I just realized im always looking up the current stat
-def get_batter_stat(player_json: dict, stat='obp'):
-    player_id, _ = get_player_id(player_json)
-    if not look_up_player(player_id)['stats']:
-        return
-    player_stat = look_up_player(player_id)['stats'][0]['stats'][stat]
-    return float(player_stat)
-
-
-
-
-
-def get_player_id(player_json: dict):
-    player_name = player_json['_value']
-    player_id = player_json['_attributes']['href'].split('-')[-1]
-    return player_id, player_name
-
-
-def get_lineup_average(player_jsons: list[dict], function):
-    lineup_avg = list(stat for stat in map(function, player_jsons) if not isinstance(stat, NoneType))
-    return lineup_avg, sum(lineup_avg) / len(lineup_avg)
-
-
-def get_lineup_jsons(match_soup: BeautifulSoup, home_away: int):
-    lineup = match_soup.find('ol',
-                             class_=f"starting-lineups__team starting-lineups__team--{str(Team(home_away).name)}").findAll(
-        'a')
-    return [convert_html(player_html)['a'][0] for player_html in lineup]
-
-
-def look_up_player(player_id, group='hitting'):
-    return statsapi.player_stat_data(player_id, group=group)
-
-
-def get_win_percent(match_soup: BeautifulSoup, home_or_away: int):
-    record_str = str(match_soup.find('div',
-                                     class_=f"starting-lineups__team-logo starting-lineups__team-logo--{str(Team(home_or_away).name)}").find(
-        'div', class_="starting-lineups__team-record").contents[0])
-    W, L = (int(str_) for str_ in re.findall(r"\d+", record_str))
-    return W / (W + L)
-
-
-def convert_html(html):
-    html_str = str(html)
-    return html_to_json.convert(html_str)
-
-
-def get_pitcher_stat(player_soup: BeautifulSoup, stat='era'):
-    player_json = convert_html(player_soup.find('a'))['a'][0]
-    player_id, _ = get_player_id(player_json)
-    if not look_up_player(player_id)['stats']:
-        return 1
-    return float(look_up_player(player_id, 'pitching')['stats'][0]['stats'][stat])
-
-
-def get_fielder_stat(player_json: dict, stat='fielding'):
-    player_id, _ = get_player_id(player_json)
-    if not look_up_player(player_id)['stats']:
-        return
-    return float(look_up_player(player_id, 'fielding')['stats'][0]['stats'][stat])
-
-
-def lineup_soup(match_soup: BeautifulSoup):
-    home_soup = match_soup.find('span', class_="starting-lineups__team-name starting-lineups__team-name--home")
-    away_soup = match_soup.find('span', class_="starting-lineups__team-name starting-lineups__team-name--away")
-    home_team = convert_html(home_soup.contents[1])['a'][0]['_value']
-    away_team = convert_html(away_soup.contents[1])['a'][0]['_value']
-    home_lineup = get_lineup_jsons(match_soup, 1)
-    if not home_lineup:
-        print("No Lineup")
-        return 1
-    away_lineup = get_lineup_jsons(match_soup, 0)
-    _, home_avg_obp = get_lineup_average(home_lineup, get_batter_stat)
-    _, away_avg_obp = get_lineup_average(away_lineup, get_batter_stat)
-    _, home_fielding_percent = get_lineup_average(home_lineup, get_fielder_stat)
-    _, away_fielding_percent = get_lineup_average(away_lineup, get_fielder_stat)
-    home_record = get_win_percent(match_soup, 1)
-    away_record = get_win_percent(match_soup, 0)
-    away_pitcher_era, home_pitcher_era = (get_pitcher_stat(player_soup) for
-                                          player_soup in match_soup.findAll('div', 'starting-lineups__pitcher-name'))
-    away_pred = away_avg_obp * away_record * home_pitcher_era * away_fielding_percent
-    home_pred = home_avg_obp * home_record * away_pitcher_era * home_fielding_percent
-    predicted_winner = int(away_pred < home_pred )
-    actual_winner = get_winning_team(int(match_soup['data-gamepk']))
-    # print(predicted_winner,actual_winner, away_pred, home_pred, away_team, home_team)
-    return away_team, home_team, away_avg_obp, home_avg_obp, away_fielding_percent, home_fielding_percent, away_pitcher_era, home_pitcher_era,actual_winner
-
-
-def get_winning_team(game_id):
-    # Retrieve game schedule information
-    schedule_info = statsapi.schedule(game_id=game_id)
-
-    if not schedule_info:
-        return "Game not found"
-
-    game = schedule_info[0]
-    home_team, away_team = game['home_name'], game['away_name']
-    home_score, away_score = game['home_score'], game['away_score']
-    game_status = game['status']
-
-    # Determine the winner
-    if game_status == 'Final':
-        return int(home_score>away_score)
-    else:
-        return 2
-
-
-def scrape_lineups(url: str):
-    response = requests.get(url)
-    soup = BeautifulSoup(response.content, 'html.parser')
-    if response.status_code == 200:
-        with ThreadPoolExecutor(max_workers=len(soup.findAll('div', class_="starting-lineups__matchup"))) as executor:
-            results = list(executor.map(lineup_soup, soup.findAll('div', class_="starting-lineups__matchup")))
-        return results
-
-
-def get_baseball_season_dates(year: int):
-    delta = timedelta(days=1)
-
-    start = datetime(year, 3, 28)
-    end = datetime(year, 9, 28)
-    dates = set()
-    while start <= end:
-        # add current date to list by converting  it to iso format
-        dates.add(start.strftime("%Y-%m-%d"))
-        # increment start date by timedelta
-        start += delta
-    sql_connect = mlb_database.create_db_connection(*mlb_database.LOGON_DICT.values(), 'mlb')
-    table_dates = set(
-        date[0].strftime("%Y-%m-%d") for date in mlb_database.get_table_column(sql_connect, 'games', 'date'))
-    dates = dates.difference(table_dates)
-    return dates
-
-
-def get_predictions(date:str=datetime.now().strftime("%Y-%m-%d")):
-    lineup_http = rf"https://www.mlb.com/starting-lineups/{date}"
-    scrape_lineups(lineup_http)
-
-
-if __name__ == "__main__":
-    get_predictions()
-
-    # for dates in get_baseball_season_dates(2023):
-    #     lineup_http = rf"https://www.mlb.com/starting-lineups/{dates}"
-    #     print(lineup_http)
-    #     try:
-    #         preds = scrape_lineups(lineup_http)
-    #         sql_connects = tuple(
-    #             mlb_database.create_db_connection(*mlb_database.logon_dict.values(), 'mlb') for _ in range(len(preds)))
-    #         insert_game = lambda connection, pred: mlb_database.insert_game('games', connection, *pred, dates)
-    #         with ThreadPoolExecutor(max_workers=len(preds)) as executor:
-    #             executor.map(insert_game, sql_connects, preds)
-    #     except Exception as e:
-    #         print(e)
